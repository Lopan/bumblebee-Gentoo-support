#!/sbin/runscript
# Copyright 1999-2011 Gentoo Foundation
# Distributed under the terms of the GNU General Public License, v2
# $Header: $

### BEGIN INIT INFO
# Provides: xdm-optimus
# Required-Start: $local_fs $remote_fs
# Required-Stop: $local_fs $remote_fs
# Should-Start: xfs $named slapd hal
# Should-Stop: xfs $named slapd hal
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: The X Display Manager for Optimus
### END INIT INFO

# set -e

#. /lib/lsb/init-functions

# To start xdm even if it is not the default display manager, change
# HEED_DEFAULT_DISPLAY_MANAGER to "false."
# Also overridable from command line like:
# HEED_DEFAULT_DISPLAY_MANAGER=false /etc/init.d/xdm start
[ -z "${HEED_DEFAULT_DISPLAY_MANAGER}" ] && HEED_DEFAULT_DISPLAY_MANAGER=true

depend() {
	# need localmount xdm-setup

	# this should start as early as possible
	# we can't do 'before *' as that breaks it
	# (#139824) Start after ypbind and autofs for network authentication
	# (#145219 #180163) Could use lirc mouse as input device
	# (#70689 comment #92) Start after consolefont to avoid display corruption
	# (#291269) Start after quota, since some dm need readable home
	# after bootmisc consolefont modules netmount
	# after readahead-list ypbind autofs openvpn gpm lircmd
	# after quota
	# before alsasound

	# Start before X
	# use consolekit xfs

	provide ${DAEMON}
}

#checkconfig() {
#	ebegin "${DAEMON} exist and is and executable"
#	test -x ${DAEMON}
#	eend ${?}
#	[ ${?} = 0 ] || return 1;
#
#	return 0;
#}

start() {
	echo "Starting X display manager xdm-optimus"

	# [ checkconfig = 0 ] || return 1;
	if [ -f ${PIDFILE} ]; then
		ewarn "Already running"
		return 1
	fi	
	LD_LIBRARY_PATH=/usr/lib64/ start-stop-daemon --start --quiet ${SSD_START_ARGS} -- -config /etc/X11/xdm-optimus/xdm-config || echo "already running"
	# eend ${?}
	# return 0
}

stop() {
	echo "Stopping X display manager"

	if ! [ -f ${PIDFILE} ]; then
		ewarn "Not running (${PIDFILE} not found)"
	else
		start-stop-daemon --stop --quiet ${SSD_STOP_ARGS}
		SSD_RES=$?
		if [ ${SSD_RES} -eq 1 ]; then
			einfo "not running"
			if [ -f ${PIDFILE} ]; then
				einfo "removing stale ${PIDFILE}"
				rm ${PIDFILE}
			fi
		fi
	fi

	# eend ${?}
	# return 0
}